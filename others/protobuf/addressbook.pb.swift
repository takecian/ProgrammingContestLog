// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: addressbook.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Tutorial_Person {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  mutating func clearEmail() {self._email = nil}

  var phones: [Tutorial_Person.PhoneNumber] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PhoneType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case mobile // = 0
    case home // = 1
    case work // = 2

    init() {
      self = .mobile
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .mobile
      case 1: self = .home
      case 2: self = .work
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .mobile: return 0
      case .home: return 1
      case .work: return 2
      }
    }

  }

  struct PhoneNumber {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var number: String {
      get {return _number ?? String()}
      set {_number = newValue}
    }
    /// Returns true if `number` has been explicitly set.
    var hasNumber: Bool {return self._number != nil}
    /// Clears the value of `number`. Subsequent reads from it will return its default value.
    mutating func clearNumber() {self._number = nil}

    var type: Tutorial_Person.PhoneType {
      get {return _type ?? .home}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    mutating func clearType() {self._type = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _number: String? = nil
    fileprivate var _type: Tutorial_Person.PhoneType? = nil
  }

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _id: Int32? = nil
  fileprivate var _email: String? = nil
}

#if swift(>=4.2)

extension Tutorial_Person.PhoneType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Tutorial_AddressBook {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var people: [Tutorial_Person] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tutorial"

extension Tutorial_Person: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Person"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .same(proto: "email"),
    4: .same(proto: "phones"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._id == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.phones) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularInt32Field(value: &self._id)
      case 3: try decoder.decodeSingularStringField(value: &self._email)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.phones)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if !self.phones.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.phones, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tutorial_Person, rhs: Tutorial_Person) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._id != rhs._id {return false}
    if lhs._email != rhs._email {return false}
    if lhs.phones != rhs.phones {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tutorial_Person.PhoneType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MOBILE"),
    1: .same(proto: "HOME"),
    2: .same(proto: "WORK"),
  ]
}

extension Tutorial_Person.PhoneNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tutorial_Person.protoMessageName + ".PhoneNumber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if self._number == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._number)
      case 2: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._number {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tutorial_Person.PhoneNumber, rhs: Tutorial_Person.PhoneNumber) -> Bool {
    if lhs._number != rhs._number {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tutorial_AddressBook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddressBook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "people"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.people) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.people)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.people.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.people, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tutorial_AddressBook, rhs: Tutorial_AddressBook) -> Bool {
    if lhs.people != rhs.people {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
