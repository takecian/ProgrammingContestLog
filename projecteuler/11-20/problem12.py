# https://projecteuler.net/problem=12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

import sys


def get_divisor_count(v):
    if v == 1: return 1

    c = 1
    i = 2
    while i * i < v:
        if v % i == 0:
            c += 1
        i += 1
    return c * 2  # number of divisors twice of divisiors detected under root(v). e.g. In case of 10, 1 and 2 are detected here.


for i in range(1, sys.maxsize):
    v = int(i * (i + 1) / 2)
    c = get_divisor_count(v)
    print(str(v) + ", count = " + str(c))
    if c > 500:
        print(str(v) + ", count = " + str(c))
        exit(0)
